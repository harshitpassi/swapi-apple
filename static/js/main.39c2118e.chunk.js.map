{"version":3,"sources":["pages/components/icons/human.svg","pages/components/icons/droid.svg","pages/components/icons/wookie.svg","fonts/star-jedi.ttf","reducer/person/actions.js","pages/components/PersonCard.js","reducer/modals/actions.js","reducer/people/actions.js","constants.js","pages/components/PersonProfile.js","pages/components/PersonWorld.js","pages/components/PersonMovies.js","pages/components/PersonStarships.js","pages/components/PeopleList.js","pages/components/Navigation.js","pages/App.js","serviceWorker.js","reducer/people/index.js","reducer/person/reducers/profile.js","reducer/person/reducers/world.js","reducer/person/reducers/movies.js","reducer/person/reducers/starships.js","reducer/person/index.js","reducer/person/reducers/id.js","reducer/index.js","reducer/modals/index.js","index.js"],"names":["module","exports","getPersonProfile","url","dispatch","fetch","then","res","json","profile","type","setPersonProfile","getPersonWorld","world","setPersonWorld","getPersonMovies","movieUrls","Promise","all","map","movies","setPersonMovies","getPersonStarships","starshipUrls","starships","setPersonStarships","connect","ownProps","props","people","setPerson","profileUrl","worldUrl","films","id","split","setCurrentPerson","img","specie","currentPerson","species","length","filmsExist","starshipsExist","human","droid","other","Card","onClick","homeworld","className","style","width","cursor","marginTop","Img","variant","src","Body","Title","name","ListGroup","ListGroupItem","getPeoplePage","pageNumber","loading","results","setPeople","person","height","mass","gender","notUnknown","item","population","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","movie","dates","release_date","key","title","episode_id","starship","modals","closeModal","getNewPage","useState","page","setPage","handlePaging","Col","lg","Header","as","Row","Spinner","animation","size","margin","data","p","index","md","span","offset","Footer","Pagination","Item","active","Modal","show","onHide","closeButton","minWidth","marginBottom","bg","text","Button","goHome","Navbar","Brand","alt","marginRight","Container","fluid","Jumbotron","href","target","rel","Boolean","window","location","hostname","match","initialState","combineReducers","state","action","sort","movie1","movie2","store","createStore","reducer","compose","applyMiddleware","thunk","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39c2118e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/human.0cf5c4bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/droid.dce70c46.svg\";","module.exports = __webpack_public_path__ + \"static/media/wookie.b6b4459c.svg\";","module.exports = __webpack_public_path__ + \"static/media/star-jedi.7c622ae5.ttf\";","export const SET_CURRENT_PERSON = 'SET_CURRENT_PERSON';\nexport const SET_PERSON_PROFILE = 'SET_PERSON_PROFILE';\nexport const SET_PERSON_WORLD = 'SET_PERSON_WORLD';\nexport const SET_PERSON_MOVIES = 'SET_PERSON_MOVIES';\nexport const SET_PERSON_STARSHIPS = 'SET_PERSON_STARSHIPS';\n\nexport function setCurrentPerson(id) {\n    return {\n        type: SET_CURRENT_PERSON,\n        id\n    };\n}\n\nexport function getPersonProfile(url) {\n    return dispatch =>\n        fetch(url)\n        .then(res => res.json())\n        .then(profile => {\n            dispatch(setPersonProfile(profile));\n        });\n}\n\nexport function setPersonProfile(profile) {\n    return {\n        type: SET_PERSON_PROFILE,\n        profile,\n    };\n}\n\nexport function getPersonWorld(url) {\n    return dispatch =>\n        fetch(url)\n        .then(res => res.json())\n        .then(world => {\n            dispatch(setPersonWorld(world));\n        });\n}\n\nexport function setPersonWorld(world) {\n    return {\n        type: SET_PERSON_WORLD,\n        world,\n    };\n}\n\nexport function getPersonMovies(movieUrls) {\n    return dispatch =>\n        Promise.all(movieUrls.map(url =>\n            fetch(url)\n            .then(res => res.json())\n        ))\n        .then(movies => {\n            dispatch(setPersonMovies(movies));\n        });\n}\n\nexport function setPersonMovies(movies) {\n    return {\n        type: SET_PERSON_MOVIES,\n        movies,\n    };\n}\n\nexport function getPersonStarships(starshipUrls) {\n    return dispatch =>\n        Promise.all(starshipUrls.map(url =>\n            fetch(url)\n            .then(res => res.json())\n        ))\n        .then(starships => {\n            dispatch(setPersonStarships(starships));\n        });\n}\n\nexport function setPersonStarships(starships) {\n    return {\n        type: SET_PERSON_STARSHIPS,\n        starships,\n    };\n}","import React from 'react';\nimport {Card, ListGroup, ListGroupItem} from 'react-bootstrap';\nimport human from './icons/human.svg';\nimport droid from './icons/droid.svg';\nimport other from './icons/wookie.svg';\nimport {connect} from 'react-redux';\nimport { setCurrentPerson, getPersonProfile, getPersonWorld, getPersonMovies, getPersonStarships } from '../../reducer/person/actions';\nimport { openProfileModal } from '../../reducer/modals/actions'\n\nconst PersonCard = ({props, setPerson}) => {\n    let specie = (props.ownProps.currentPerson && props.ownProps.currentPerson.species.length !== 0) ? props.ownProps.currentPerson.species[0].split('/')[5] : null;\n    let filmsExist = (props.ownProps.currentPerson && props.ownProps.currentPerson.films);\n    let starshipsExist = (props.ownProps.currentPerson && props.ownProps.currentPerson.starships);\n    let img;\n    switch(specie) {\n        case '1' :\n            img = human;\n            break;\n        case '2' :\n            img = droid;\n            break;\n        default :\n            img = other;\n    }\n    return <Card onClick={setPerson(props.ownProps.currentPerson.url, props.ownProps.currentPerson.homeworld, props.ownProps.currentPerson.films, props.ownProps.currentPerson.starships)} className=\"person-card\" style={{ width: '100%', cursor: 'pointer', marginTop: '10px' }}>\n    <Card.Img variant=\"top\" src={img} />\n    <Card.Body>\n    <Card.Title>{props.ownProps.currentPerson.name}</Card.Title>\n    </Card.Body>\n    <ListGroup className=\"list-group-flush person-list\">\n        <ListGroupItem>Films: { filmsExist && props.ownProps.currentPerson.films.length}</ListGroupItem>\n        <ListGroupItem>Starships: { starshipsExist && props.ownProps.currentPerson.starships.length}</ListGroupItem>\n    </ListGroup>\n    </Card>\n}\n\nconst mapStateToProps = ({people}, ownProps)=>({\n    props:{\n        people,\n        ownProps\n    }\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setPerson(profileUrl, worldUrl, films, starships) {\n        let id = profileUrl.split('/')[5];\n        return () => {\n            dispatch(setCurrentPerson(id));\n            dispatch(getPersonProfile(profileUrl));\n            dispatch(getPersonWorld(worldUrl));\n            dispatch(getPersonMovies(films));\n            dispatch(getPersonStarships(starships));\n            dispatch(openProfileModal());\n        }\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonCard);","export const MODAL_OPEN = 'MODAL_OPEN';\nexport const MODAL_CLOSE = 'MODAL_CLOSE';\n\nexport function openProfileModal() {\n    return {\n        type: MODAL_OPEN\n    }\n}\n\nexport function closeProfileModal() {\n    return {\n        type: MODAL_CLOSE\n    }\n}","import { API_URL } from '../../constants';\n\nexport const SET_PEOPLE = 'SET_PEOPLE';\nexport const SHOW_LOADER = 'SHOW_LOADER';\n\nexport function getPeople() {\n    return dispatch =>\n        fetch(`${API_URL}/people`)\n        .then(res => res.json())\n        .then(res => res.results)\n        .then(people =>\n            dispatch(setPeople(people))\n        );\n}\n\nexport function getPeoplePage(pageNumber) {\n    return dispatch => {\n        dispatch(showLoader());\n        return fetch(`${API_URL}/people/?page=${pageNumber}`)\n            .then(res => res.json())\n            .then(res => res.results)\n            .then(people =>\n                dispatch(setPeople(people))\n            );\n    }\n}\n\nexport function showLoader() {\n    return {\n        type: SHOW_LOADER,\n        loading: true\n    }\n}\n\nexport function setPeople(people) {\n    return {\n        type: SET_PEOPLE,\n        people\n    }\n}","export const API_URL = 'https://swapi.co/api';","import React from 'react';\nimport {connect} from 'react-redux';\n\nconst PersonProfile = ({profile, world}) => {\n    return <>\n    {profile.name && <p>Name: {profile.name}</p>}\n    {profile.height && <p>Height: {profile.height} cm</p>}\n    {profile.mass && <p>Mass: {profile.mass} kg</p>}\n    {profile.gender && <p>Gender: {profile.gender}</p>}\n    {world.name && <p>Homeworld: {world.name}</p>}\n</>\n};\n\nconst mapStateToProps = ({person : {profile, world}}) => ({\n    profile, world\n});\n\nexport default connect(mapStateToProps)(PersonProfile);","import React from 'react';\nimport {connect} from 'react-redux';\n\nconst notUnknown = item => item && item !== 'unknown';\n\nconst PersonWorld = ({world}) => {\n    return <>\n    {notUnknown(world.name) && <p>Name: {world.name}</p>}\n    {notUnknown(world.population) && <p>Population: {world.population}</p>}\n    {notUnknown(world.rotation_period) && <p>Rotation Period: {world.rotation_period} hours</p>}\n    {notUnknown(world.orbital_period) && <p>Orbital Period: {world.orbital_period} days</p>}\n    {notUnknown(world.diameter) && <p>Diameter: {world.diameter} km</p>}\n    {notUnknown(world.climate) && <p>Climate: {world.climate}</p>}\n    {notUnknown(world.gravity) && <p>Gravity: {world.gravity}</p>}\n    {notUnknown(world.terrain) && <p>Terrain: {world.terrain}</p>}\n    {notUnknown(world.surface_water) && <p>Surface Water: {world.surface_water}</p>}\n</>\n};\n\nconst mapStateToProps = ({person : {world}}) => ({\n    world\n});\n\nexport default connect(mapStateToProps)(PersonWorld);","import React from 'react';\nimport {connect} from 'react-redux';\n\nconst PersonMovies = ({movies}) =>  <>\n    <ul>\n        {movies.map(movie => {\n            const dates = movie.release_date.split('-');\n\n        return <li key={movie.title}> Episode {movie.episode_id} - {movie.title} ({dates[0]})</li>\n        })}\n    </ul>\n</>\n\nconst mapStateToProps = ({person : {movies}}) => ({\n    movies\n});\n\nexport default connect(mapStateToProps)(PersonMovies);\n\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nconst PersonStarships = ({starships}) =>  <>\n    <ul>\n        {starships.map(starship => {\n        return <li key={starship.name}> {starship.name}</li>\n        })}\n    </ul>\n</>\n\nconst mapStateToProps = ({person : {starships}}) => ({\n    starships\n});\n\nexport default connect(mapStateToProps)(PersonStarships);","import React, {useState} from 'react';\nimport {Col, Card, Row, Spinner, Modal, Button, Pagination} from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport PersonCard from './PersonCard';\nimport { closeProfileModal } from '../../reducer/modals/actions'\nimport { getPeoplePage } from '../../reducer/people/actions';\nimport PersonProfile from './PersonProfile';\nimport PersonWorld from './PersonWorld';\nimport PersonMovies from './PersonMovies';\nimport PersonStarships from './PersonStarships';\n\nconst PeopleList = ({people, person, modals, closeModal, getNewPage}) => {\n    const [page, setPage] = useState(1);\n    const handlePaging = (pageNumber) => {\n        setPage(pageNumber);\n        getNewPage(pageNumber);\n    };\n    return <>\n    <Col lg={12}>\n    <Card>\n    <Card.Header as=\"h3\">People</Card.Header>\n    <Card.Body>\n        <Row>\n        {people.loading && <Spinner animation=\"grow\" variant=\"info\" size=\"lg\" style={{margin: \"auto\"}} />}\n        {!people.loading && people.data.map((p, index)=> <Col key={p.name} md={{span:2, offset: index % 5===0 ? 1 : 0 }}>\n            <PersonCard currentPerson={p} />\n        </Col>\n            )}\n        </Row>\n    </Card.Body>\n    <Card.Footer className=\"text-center\">\n    <Pagination style={{width: '25%', margin: 'auto'}}>\n        <Pagination.Item active={page===1} onClick={() => handlePaging(1)} >{1}</Pagination.Item>\n        <Pagination.Item active={page===2} onClick={() => handlePaging(2)} >{2}</Pagination.Item>\n        <Pagination.Item active={page===3} onClick={() => handlePaging(3)} >{3}</Pagination.Item>\n        <Pagination.Item active={page===4} onClick={() => handlePaging(4)} >{4}</Pagination.Item>\n        <Pagination.Item active={page===5} onClick={() => handlePaging(5)} >{5}</Pagination.Item>\n        <Pagination.Item active={page===6} onClick={() => handlePaging(6)} >{6}</Pagination.Item>\n        <Pagination.Item active={page===7} onClick={() => handlePaging(7)} >{7}</Pagination.Item>\n        <Pagination.Item active={page===8} onClick={() => handlePaging(8)} >{8}</Pagination.Item>\n        <Pagination.Item active={page===9} onClick={() => handlePaging(9)} >{9}</Pagination.Item>\n        </Pagination>\n    </Card.Footer>\n    </Card>\n    </Col>\n\n    <Modal show={modals} onHide={closeModal()}>\n        <Modal.Header closeButton>\n<Modal.Title>{person.profile.name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body style={{minWidth: '80%'}}>\n            <Row style={{marginBottom: '15px'}}>\n                <Col md={6}>\n                    <Card bg=\"success\" text=\"white\">\n                <Card.Header>Profile</Card.Header>\n            <Card.Body>\n                {person.profile.name && <PersonProfile />}\n            </Card.Body>\n            </Card>\n                </Col>\n                <Col md={6}>\n                {person.world.name !== 'unknown' && <Card bg=\"secondary\" text=\"white\">\n            <Card.Header>World</Card.Header>\n            <Card.Body>\n                 <PersonWorld /></Card.Body>\n            </Card>}\n                </Col>\n                </Row><Row>\n                <Col md={6}>\n                    <Card bg=\"warning\" text=\"white\">\n            <Card.Header>Films</Card.Header>\n            <Card.Body>\n                {person.movies.length > 0 && <PersonMovies />}</Card.Body>\n            </Card>\n                </Col>\n                <Col md={6}>\n                    {person.starships.length > 0 && <Card bg=\"info\" text=\"white\">\n                        <Card.Header>Starships</Card.Header>\n                        <Card.Body>\n                            <PersonStarships /></Card.Body>\n                    </Card>}\n                </Col>\n            </Row>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={closeModal()}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>;\n}\n\nconst mapStateToProps = ({people, person, modals})=>({\n    people,\n    person,\n    modals\n});\n\nconst mapDispatchToProps = dispatch => ({\n    closeModal() {\n        return () => {\n            dispatch(closeProfileModal());\n        }\n    },\n    getNewPage(pageNumber) {\n        return dispatch(getPeoplePage(pageNumber));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PeopleList);","import React from 'react';\nimport {Navbar} from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { getPeoplePage } from '../../reducer/people/actions';\n\nconst Navigation = ({goHome}) => (<Navbar className='header-bar' variant=\"dark\">\n<Navbar.Brand style={{cursor: 'pointer'}} onClick={goHome()} >\n  <img\n    alt=\"\"\n    src=\"https://upload.wikimedia.org/wikipedia/commons/9/9b/Star_Wars_Yellow_Logo.svg\"\n    width=\"90\"\n    height=\"90\"\n    className=\"d-inline-block\"\n    style={{marginRight: '10px'}}\n  />{' '}\n  Character Catalogue\n</Navbar.Brand>\n</Navbar>)\n\nconst mapDispatchToProps = dispatch => ({\n    goHome() {\n        return () => {\n            dispatch(getPeoplePage(1));\n        }\n    }\n});\n\nexport default connect(null, mapDispatchToProps)(Navigation);","import React from 'react';\nimport {Container, Row, Jumbotron} from 'react-bootstrap';\nimport './App.css';\nimport PeopleList from './components/PeopleList';\nimport Navigation from './components/Navigation';\nimport {connect} from 'react-redux';\n\n\nfunction App({person}) {\n  return (\n    <Container fluid>\n      <Navigation />\n      <Jumbotron>\n  <h1>Star Wars Character Catalogue</h1>\n  <p>\n    This is a Star Wars Character Catalogue, built on top of the <a href=\"https://swapi.co\" target=\"_blank\" rel=\"noopener noreferrer\">SWAPI</a> API. You can click on\n    the name of a character to learn all about their characteristics, their homeworlds, the films they appeared in, and more!\n  </p>\n</Jumbotron>\n      <Row>\n        <PeopleList />\n      </Row>\n    </Container>\n  );\n}\n\nconst mapStateToProps= ({person}) => ({\n  person\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_PEOPLE, SHOW_LOADER } from './actions';\n\nconst initialState = {\n    loading: true,\n    data: []\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PEOPLE:\n            return {\n                loading: false,\n                data: action.people\n            };\n        case SHOW_LOADER:\n            return {\n                loading: true\n            }\n        default:\n            return state;\n    }\n}","import { SET_PERSON_PROFILE } from '../actions';\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_PROFILE:\n            return action.profile;\n        default:\n            return state;\n    }\n}","import { SET_PERSON_WORLD } from '../actions';\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_WORLD:\n            return action.world;\n        default:\n            return state;\n    }\n}","import { SET_PERSON_MOVIES } from '../actions';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_MOVIES:\n            return action.movies.sort((movie1, movie2) =>\n                movie1.episode_id - movie2.episode_id\n            );\n        default:\n            return state;\n    }\n}","import { SET_PERSON_STARSHIPS } from '../actions';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_STARSHIPS:\n            return action.starships;\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport id from './reducers/id';\nimport profile from './reducers/profile';\nimport world from './reducers/world';\nimport movies from './reducers/movies';\nimport starships from './reducers/starships';\n\nexport default combineReducers({\n    id,\n    profile,\n    world,\n    movies,\n    starships\n})","import { SET_CURRENT_PERSON } from '../actions';\n\nconst initialState = 0;\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CURRENT_PERSON:\n            return action.id;\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport people from './people';\nimport person from './person';\nimport modals from './modals/index';\n\nexport default combineReducers({\n    people,\n    person,\n    modals\n});","import { MODAL_OPEN, MODAL_CLOSE } from './actions';\n\nconst initialState = false;\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case MODAL_OPEN:\n            return true;\n        case MODAL_CLOSE:\n            return false;\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/star-jedi.ttf';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\nimport {getPeople} from './reducer/people/actions'\n\nconst store = createStore(reducer, compose(\n    applyMiddleware(thunk),\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nstore.dispatch(getPeople());\n\nconst root = document.getElementById('root');\n\nReactDOM.render( \n<Provider store={store}>\n    <App /> \n</Provider>\n, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}