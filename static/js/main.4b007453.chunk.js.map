{"version":3,"sources":["reducer/person/actions.js","pages/components/PeopleList.js","pages/components/PersonProfile.js","pages/components/PersonWorld.js","pages/components/PersonMovies.js","pages/components/PersonStarships.js","pages/components/Navigation.js","pages/App.js","serviceWorker.js","reducer/people/index.js","reducer/person/reducers/profile.js","reducer/person/reducers/world.js","reducer/person/reducers/movies.js","reducer/person/reducers/starships.js","reducer/person/index.js","reducer/person/reducers/id.js","reducer/index.js","reducer/people/actions.js","index.js","constants.js"],"names":["getPersonProfile","url","dispatch","fetch","then","res","json","profile","type","setPersonProfile","getPersonWorld","world","setPersonWorld","getPersonMovies","movieUrls","Promise","all","map","movies","setPersonMovies","getPersonStarships","starshipUrls","starships","setPersonStarships","connect","people","setPerson","profileUrl","worldUrl","films","setShow","id","split","setCurrentPerson","Col","lg","Card","Header","as","Body","Row","loading","Spinner","animation","variant","size","style","margin","data","p","index","md","span","offset","Button","className","onClick","homeworld","name","person","height","mass","gender","notUnknown","item","population","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","length","movie","dates","release_date","key","title","episode_id","starship","Navbar","Brand","href","alt","src","width","Container","fluid","Navigation","Jumbotron","target","rel","Boolean","window","location","hostname","match","initialState","combineReducers","state","action","sort","movie1","movie2","store","createStore","reducer","compose","applyMiddleware","thunk","results","setPeople","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b007453.chunk.js","sourcesContent":["export const SET_CURRENT_PERSON = 'SET_CURRENT_PERSON';\nexport const SET_PERSON_PROFILE = 'SET_PERSON_PROFILE';\nexport const SET_PERSON_WORLD = 'SET_PERSON_WORLD';\nexport const SET_PERSON_MOVIES = 'SET_PERSON_MOVIES';\nexport const SET_PERSON_STARSHIPS = 'SET_PERSON_STARSHIPS';\n\nexport function setCurrentPerson(id) {\n    return {\n        type: SET_CURRENT_PERSON,\n        id\n    };\n}\n\nexport function getPersonProfile(url) {\n    return dispatch =>\n        fetch(url)\n        .then(res => res.json())\n        .then(profile => {\n            dispatch(setPersonProfile(profile));\n        });\n}\n\nexport function setPersonProfile(profile) {\n    return {\n        type: SET_PERSON_PROFILE,\n        profile,\n    };\n}\n\nexport function getPersonWorld(url) {\n    return dispatch =>\n        fetch(url)\n        .then(res => res.json())\n        .then(world => {\n            dispatch(setPersonWorld(world));\n        });\n}\n\nexport function setPersonWorld(world) {\n    return {\n        type: SET_PERSON_WORLD,\n        world,\n    };\n}\n\nexport function getPersonMovies(movieUrls) {\n    return dispatch =>\n        Promise.all(movieUrls.map(url =>\n            fetch(url)\n            .then(res => res.json())\n        ))\n        .then(movies => {\n            dispatch(setPersonMovies(movies));\n        });\n}\n\nexport function setPersonMovies(movies) {\n    return {\n        type: SET_PERSON_MOVIES,\n        movies,\n    };\n}\n\nexport function getPersonStarships(starshipUrls) {\n    return dispatch =>\n        Promise.all(starshipUrls.map(url =>\n            fetch(url)\n            .then(res => res.json())\n        ))\n        .then(starships => {\n            dispatch(setPersonStarships(starships));\n        });\n}\n\nexport function setPersonStarships(starships) {\n    return {\n        type: SET_PERSON_STARSHIPS,\n        starships,\n    };\n}","import React from 'react';\nimport {Col, Card, Button, Row, Spinner} from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport { setCurrentPerson, getPersonProfile, getPersonWorld, getPersonMovies, getPersonStarships } from '../../reducer/person/actions';\n\nconst PeopleList = ({people, setPerson}) => \n    <Col lg={12}>\n    <Card>\n    <Card.Header as=\"h3\">People</Card.Header>\n    <Card.Body>\n        <Row>\n        {people.loading && <Spinner animation=\"grow\" variant=\"info\" size=\"lg\" style={{margin: \"auto\"}} />}\n        {!people.loading && people.data.map((p, index)=> <Col md={{span:2, offset: index % 5===0 ? 1 : 0 }}>\n            <Button className=\"people-button\" variant=\"primary\" onClick={setPerson(p.url, p.homeworld, p.films, p.starships)}>{p.name}</Button>{' '}\n        </Col>\n            )}\n        </Row>\n    </Card.Body>\n    </Card>\n    </Col>;\n\nconst mapStateToProps = ({people})=>({\n    people,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setPerson(profileUrl, worldUrl, films, starships, setShow) {\n        let id = profileUrl.split('/')[5];\n        return () => {\n            dispatch(setCurrentPerson(id));\n            dispatch(getPersonProfile(profileUrl));\n            dispatch(getPersonWorld(worldUrl));\n            dispatch(getPersonMovies(films));\n            dispatch(getPersonStarships(starships));\n        }\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PeopleList);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Col} from 'react-bootstrap';\n\nconst PersonProfile = ({profile, world}) => {\n    return <Col md={3}>\n    {profile.name && <h1>Profile</h1>}\n    {profile.name && <p>Name: {profile.name}</p>}\n    {profile.height && <p>Height: {profile.height} cm</p>}\n    {profile.mass && <p>Mass: {profile.mass} kg</p>}\n    {profile.gender && <p>Gender: {profile.gender}</p>}\n    {world.name && <p>Homeworld: {world.name}</p>}\n</Col>\n};\n\nconst mapStateToProps = ({person : {profile, world}}) => ({\n    profile, world\n});\n\nexport default connect(mapStateToProps)(PersonProfile);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Col} from 'react-bootstrap';\n\nconst notUnknown = item => item && item !== 'unknown';\n\nconst PersonWorld = ({world}) => {\n    return <Col md={3}>\n    {notUnknown(world.name) && <h1>World</h1>}\n    {notUnknown(world.name) && <p>Name: {world.name}</p>}\n    {notUnknown(world.population) && <p>Population: {world.population}</p>}\n    {notUnknown(world.rotation_period) && <p>Rotation Period: {world.rotation_period} hours</p>}\n    {notUnknown(world.orbital_period) && <p>Orbital Period: {world.orbital_period} days</p>}\n    {notUnknown(world.diameter) && <p>Diameter: {world.diameter} km</p>}\n    {notUnknown(world.climate) && <p>Climate: {world.climate}</p>}\n    {notUnknown(world.gravity) && <p>Gravity: {world.gravity}</p>}\n    {notUnknown(world.terrain) && <p>Terrain: {world.terrain}</p>}\n    {notUnknown(world.surface_water) && <p>Surface Water: {world.surface_water}</p>}\n</Col>\n};\n\nconst mapStateToProps = ({person : {world}}) => ({\n    world\n});\n\nexport default connect(mapStateToProps)(PersonWorld);","import React from 'react';\nimport {Col} from 'react-bootstrap';\nimport {connect} from 'react-redux';\n\nconst PersonMovies = ({movies}) =>  <Col md={3}>\n    {movies.length > 0 && <h1>Films</h1>}\n    <ul>\n        {movies.map(movie => {\n            const dates = movie.release_date.split('-');\n\n        return <li key={movie.title}> Episode {movie.episode_id} - {movie.title} ({dates[0]})</li>\n        })}\n    </ul>\n</Col>\n\nconst mapStateToProps = ({person : {movies}}) => ({\n    movies\n});\n\nexport default connect(mapStateToProps)(PersonMovies);\n\n","import React from 'react';\nimport {Col} from 'react-bootstrap';\nimport {connect} from 'react-redux';\n\nconst PersonStarships = ({starships}) =>  <Col md={3}>\n    {starships.length > 0 && <h1>Starships</h1>}\n    <ul>\n        {starships.map(starship => {\n        return <li key={starship.name}> {starship.name}</li>\n        })}\n    </ul>\n</Col>\n\nconst mapStateToProps = ({person : {starships}}) => ({\n    starships\n});\n\nexport default connect(mapStateToProps)(PersonStarships);","import React from 'react';\nimport {Navbar} from 'react-bootstrap';\n\nexport default () => (<Navbar className='header-bar' variant=\"dark\">\n<Navbar.Brand href=\"#home\">\n  <img\n    alt=\"\"\n    src=\"https://upload.wikimedia.org/wikipedia/commons/9/9b/Star_Wars_Yellow_Logo.svg\"\n    width=\"60\"\n    height=\"60\"\n    className=\"d-inline-block align-top\"\n  />{' '}\n  Character Catalogue\n</Navbar.Brand>\n</Navbar>) ","import React from 'react';\nimport {Container, Row, Jumbotron} from 'react-bootstrap';\nimport './App.css';\nimport PeopleList from './components/PeopleList';\nimport PersonProfile from './components/PersonProfile';\nimport PersonWorld from './components/PersonWorld';\nimport PersonMovies from './components/PersonMovies';\nimport PersonStarships from './components/PersonStarships';\nimport Navigation from './components/Navigation';\nimport {connect} from 'react-redux';\n\n\nfunction App({person}) {\n  return (\n    <Container fluid>\n      <Navigation />\n      <Jumbotron>\n  <h1>Star Wars Character Catalogue</h1>\n  <p>\n    This is a Star Wars Character Catalogue, built on top of the <a href=\"https://swapi.co\" target=\"_blank\" rel=\"noopener noreferrer\">SWAPI</a> API. You can click on\n    the name of a character to learn all about their characteristics, their homeworlds, the films they appeared in, and more!\n  </p>\n</Jumbotron>\n      <Row>\n        <PeopleList />\n        {person.profile && <PersonProfile />}\n        {person.world && <PersonWorld />}\n        {person.movies && <PersonMovies />}\n        {person.starships && <PersonStarships />}\n      </Row>\n    </Container>\n  );\n}\n\nconst mapStateToProps= ({person}) => ({\n  person\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_PEOPLE } from './actions';\n\nconst initialState = {\n    loading: true,\n    data: []\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PEOPLE:\n            return {\n                loading: false,\n                data: action.people\n            };\n        default:\n            return state;\n    }\n}","import { SET_PERSON_PROFILE } from '../actions';\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_PROFILE:\n            return action.profile;\n        default:\n            return state;\n    }\n}","import { SET_PERSON_WORLD } from '../actions';\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_WORLD:\n            return action.world;\n        default:\n            return state;\n    }\n}","import { SET_PERSON_MOVIES } from '../actions';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_MOVIES:\n            return action.movies.sort((movie1, movie2) =>\n                movie1.episode_id - movie2.episode_id\n            );\n        default:\n            return state;\n    }\n}","import { SET_PERSON_STARSHIPS } from '../actions';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PERSON_STARSHIPS:\n            return action.starships;\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport id from './reducers/id';\nimport profile from './reducers/profile';\nimport world from './reducers/world';\nimport movies from './reducers/movies';\nimport starships from './reducers/starships';\n\nexport default combineReducers({\n    id,\n    profile,\n    world,\n    movies,\n    starships\n})","import { SET_CURRENT_PERSON } from '../actions';\n\nconst initialState = 0;\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CURRENT_PERSON:\n            return action.id;\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport people from './people';\nimport person from './person';\n\nexport default combineReducers({\n    people,\n    person\n});","import { API_URL } from '../../constants';\n\nexport const SET_PEOPLE = 'SET_PEOPLE';\n\nexport function getPeople() {\n    return dispatch =>\n        fetch(`${API_URL}/people`)\n        .then(res => res.json())\n        .then(res => res.results)\n        .then(people =>\n            dispatch(setPeople(people))\n        );\n}\n\nexport function setPeople(people) {\n    return {\n        type: SET_PEOPLE,\n        people\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\nimport {getPeople} from './reducer/people/actions'\n\nconst store = createStore(reducer, compose(\n    applyMiddleware(thunk)\n));\n\nstore.dispatch(getPeople());\n\nconst root = document.getElementById('root');\n\nReactDOM.render( \n<Provider store={store}>\n    <App /> \n</Provider>\n, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","export const API_URL = 'https://swapi.co/api';"],"sourceRoot":""}